(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ModalActions;

ModalActions = Reflux.createActions(['submit', 'setCurrentProject', 'setType', 'handleName', 'handleDescription', 'handleRepo', 'handleMember', 'addMember', 'deleteMember']);

module.exports = ModalActions;


},{}],2:[function(require,module,exports){
var ProjectListActions;

ProjectListActions = Reflux.createActions(['fetchList', 'delete', 'changeCurrent']);

module.exports = ProjectListActions;


},{}],3:[function(require,module,exports){
var ProjectActions;

ProjectActions = Reflux.createActions(['selectBacklog', 'setCurrentProject', 'selectSprints']);

module.exports = ProjectActions;


},{}],4:[function(require,module,exports){
var SprintListActions;

SprintListActions = Reflux.createActions(['handleName', 'handleDescription', 'add', 'setList']);

module.exports = SprintListActions;


},{}],5:[function(require,module,exports){
var Actions, AddProject, DeleteConfirm, DeleteProject, EditProject, ModalActions, Project, ProjectList, Store;

Actions = require('../actions/project-list');

Store = require('../stores/project-list');

ModalActions = require('../actions/modal');

AddProject = React.createClass({displayName: "AddProject",
  render: function() {
    return React.createElement("a", {
      "onClick": ModalActions.setType.bind(null, event, 'post'),
      "data-toggle": "modal",
      "data-target": "#addModal",
      "className": "material-icons"
    }, "add");
  }
});

DeleteConfirm = React.createClass({displayName: "DeleteConfirm",
  render: function() {
    return React.createElement("div", {
      "className": "modal fade",
      "id": "confirmModal"
    }, React.createElement("div", {
      "className": "modal-dialog"
    }, React.createElement("div", {
      "className": "modal-content"
    }, React.createElement("div", {
      "className": "modal-header"
    }, React.createElement("button", {
      "type": "button",
      "className": "close",
      "data-dismiss": "modal",
      "aria-label": "Close"
    }, React.createElement("span", {
      "aria-hidden": "true"
    }, "Ã—")), React.createElement("h4", {
      "className": "modal-title"
    }, "Etes-vous sur de vouloir supprimer le projet?")), React.createElement("div", {
      "className": "modal-body"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default",
      "data-dismiss": "modal"
    }, "Non"), React.createElement("button", {
      "type": "submit",
      "className": "btn btn-primary",
      "onClick": this.props.handle
    }, "Oui")))));
  }
});

DeleteProject = React.createClass({displayName: "DeleteProject",
  render: function() {
    return React.createElement("span", null, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default"
    }, React.createElement("a", {
      "data-toggle": "modal",
      "data-target": "#confirmModal",
      "className": "material-icons"
    }, "delete")), React.createElement(DeleteConfirm, {
      "handle": Actions["delete"]
    }));
  }
});

EditProject = React.createClass({displayName: "EditProject",
  render: function() {
    return React.createElement("a", {
      "onClick": ModalActions.setType.bind(null, event, 'put'),
      "data-toggle": "modal",
      "data-target": "#addModal",
      "className": "material-icons"
    }, "edit");
  }
});

Project = React.createClass({displayName: "Project",
  render: function() {
    return React.createElement("li", {
      "onClick": this.props.onClick.bind(null, this.props.id),
      "className": "",
      "aria-labelledby": "dropdownMenu"
    }, React.createElement("a", null, this.props.name));
  }
});

ProjectList = React.createClass({displayName: "ProjectList",
  mixins: [Reflux.connect(Store, 'data')],
  render: function() {
    var current, k, list, project, projects;
    current = this.state.data.current;
    projects = this.state.data.projects;
    list = [];
    for (k in projects) {
      project = projects[k];
      list.push(React.createElement(Project, {
        "id": k,
        "key": k,
        "name": project.name,
        "onClick": Actions.changeCurrent
      }));
    }
    return React.createElement("div", {
      "className": "btn-group",
      "role": "group",
      "aria-label": "..."
    }, React.createElement("div", {
      "className": "dropdown"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default dropdown-toggle",
      "id": "dropdownMenu",
      "data-toggle": "dropdown",
      "aria-haspopup": "true",
      "aria-expanded": "true"
    }, React.createElement("p", null, (projects.length !== 0 ? projects[current].name : void 0), React.createElement("span", {
      "className": "caret"
    }))), React.createElement("button", {
      "type": "button",
      "className": "btn btn-default"
    }, React.createElement(EditProject, {
      "project": projects[current]
    })), React.createElement(DeleteProject, null), React.createElement("button", {
      "type": "button",
      "className": "btn btn-default"
    }, React.createElement(AddProject, null)), React.createElement("ul", {
      "className": "dropdown-menu"
    }, list)));
  }
});

module.exports = ProjectList;


},{"../actions/modal":1,"../actions/project-list":2,"../stores/project-list":9}],6:[function(require,module,exports){
var Actions, Project, SprintList, Store, TabContent, TabNav;

Actions = require('../actions/project');

Store = require('../stores/project');

SprintList = require('./sprint-list');

TabNav = React.createClass({displayName: "TabNav",
  render: function() {
    return React.createElement("nav", {
      "role": "navigation"
    }, React.createElement("ul", {
      "className": "nav nav-tabs"
    }, React.createElement("li", {
      "onClick": Actions.selectBacklog,
      "role": "presentation",
      "className": (this.props.backlog ? 'active' : void 0)
    }, React.createElement("a", null, "Backlog")), React.createElement("li", {
      "onClick": Actions.selectSprints,
      "role": "presentation",
      "className": (!this.props.backlog ? 'active' : void 0)
    }, React.createElement("a", null, "Sprints"))));
  }
});

TabContent = React.createClass({displayName: "TabContent",
  render: function() {
    return React.createElement("div", null, (!this.props.backlog ? React.createElement(SprintList, null) : void 0));
  }
});

Project = React.createClass({displayName: "Project",
  mixin: [Reflux.connect(Store, 'data')],
  render: function() {
    var backlog;
    backlog = this.state.data.backlog;
    return React.createElement("div", null, React.createElement(TabNav, {
      "backlog": backlog
    }), React.createElement(TabContent, {
      "backlog": backlog
    }));
  }
});

module.exports = Project;


},{"../actions/project":3,"../stores/project":10,"./sprint-list":7}],7:[function(require,module,exports){
var Actions, Sprint, SprintList, Store;

Store = require('../stores/sprint-list');

Actions = require('../actions/sprint-list');

Sprint = React.createClass({displayName: "Sprint",
  render: function() {
    return React.createElement("div", {
      "className": "panel panel-primary"
    }, React.createElement("div", {
      "className": "panel-heading"
    }, this.props.id), React.createElement("div", {
      "className": "panel-body"
    }, this.props.start));
  }
});

SprintList = React.createClass({displayName: "SprintList",
  mixins: [Reflux.connect(Store, 'list')],
  render: function() {
    var items;
    console.log(this.state.list);
    items = this.state.list.map(function(i) {
      return React.createElement(Sprint, {
        "key": i.id,
        "id": i.id,
        "start": i.start
      });
    });
    return React.createElement("div", {
      "className": "list-group"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default"
    }, React.createElement("a", {
      "onClick": Actions.add,
      "data-toggle": "modal",
      "data-target": "#sprintModal",
      "className": "material-icons"
    }, "add")), items);
  }
});

module.exports = SprintList;


},{"../actions/sprint-list":4,"../stores/sprint-list":11}],8:[function(require,module,exports){
var Main, Project, ProjectList;

ProjectList = require('./components/project-list');

Project = require('./components/project');

Main = React.createClass({displayName: "Main",
  render: function() {
    return React.createElement("div", null, React.createElement(ProjectList, null), React.createElement(Project, null));
  }
});

React.render(React.createElement(Main, null), document.getElementById('content'));


},{"./components/project":6,"./components/project-list":5}],9:[function(require,module,exports){
var Actions, ProjectActions, ProjectListStore;

Actions = require('../actions/project-list');

ProjectActions = require('../actions/project');

ProjectListStore = Reflux.createStore({
  getInitialState: function() {
    return this.data;
  },
  changeCurrent: function(id) {
    this.data.current = id;
    this.trigger(this.data);
    return ProjectActions.setCurrentProject(this.data.projects[this.data.current]);
  },
  data: {
    projects: [],
    current: 0
  },
  listenables: [Actions],
  srcUrl: '/api/v1/projects',
  init: function() {
    return this.fetchList();
  },
  "delete": function() {
    var id, request;
    id = this.data.projects[this.data.current]._id;
    request = superagent;
    return request["delete"](this.srcUrl + '/' + id).end((function(err, res) {
      if (res.ok) {
        delete this.data.projects[this.data.current];
        return this.changeCurrent(0);
      }
    }).bind(this));
  },
  fetchList: function() {
    var request;
    request = superagent;
    return request.get(this.srcUrl).accept('application/json').end((function(err, res) {
      if (res.ok) {
        this.data.projects = res.body;
        return this.changeCurrent(0);
      }
    }).bind(this));
  }
});

module.exports = ProjectListStore;


},{"../actions/project":3,"../actions/project-list":2}],10:[function(require,module,exports){
var Actions, ModalActions, ProjectStore, SprintListActions;

Actions = require('../actions/project');

ModalActions = require('../actions/modal');

SprintListActions = require('../actions/sprint-list');

ProjectStore = Reflux.createStore({
  getInitialState: function() {
    console.log('h');
    return this.data;
  },
  listenables: [Actions],
  data: {
    project: {},
    backlog: true
  },
  init: function() {
    console.log(this.data);
    return this.trigger(this.data);
  },
  selectBacklog: function() {
    this.data.backlog = true;
    return this.trigger(this.data);
  },
  selectSprints: function() {
    this.data.backlog = false;
    return this.trigger(this.data);
  },
  setCurrentProject: function(p) {
    this.data.project = p;
    this.trigger(this.data);
    SprintListActions.setList(this.data.project.sprints);
    return ModalActions.setCurrentProject(this.data.project);
  }
});

module.exports = ProjectStore;


},{"../actions/modal":1,"../actions/project":3,"../actions/sprint-list":4}],11:[function(require,module,exports){
var Actions, SprintListStore;

Actions = require('../actions/sprint-list');

SprintListStore = Reflux.createStore({
  listenables: [Actions],
  list: [],
  init: function() {
    return this.fetch();
  },
  getInitialState: function() {
    console.log;
    return this.list;
  },
  setList: function(l) {
    console.log(l);
    this.list = l;
    return this.fetch();
  },
  fetch: function() {
    return this.trigger(this.list);
  }
});

module.exports = SprintListStore;


},{"../actions/sprint-list":4}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9saWIvbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS94aGl0ZWRldi9jcmVtaS9jcC9zY3J1bXkvYXBwL2pzL2FjdGlvbnMvbW9kYWwuY2pzeCIsIi9ob21lL3hoaXRlZGV2L2NyZW1pL2NwL3NjcnVteS9hcHAvanMvYWN0aW9ucy9wcm9qZWN0LWxpc3QuY2pzeCIsIi9ob21lL3hoaXRlZGV2L2NyZW1pL2NwL3NjcnVteS9hcHAvanMvYWN0aW9ucy9wcm9qZWN0LmNqc3giLCIvaG9tZS94aGl0ZWRldi9jcmVtaS9jcC9zY3J1bXkvYXBwL2pzL2FjdGlvbnMvc3ByaW50LWxpc3QuY2pzeCIsIi9ob21lL3hoaXRlZGV2L2NyZW1pL2NwL3NjcnVteS9hcHAvanMvY29tcG9uZW50cy9wcm9qZWN0LWxpc3QuY2pzeCIsIi9ob21lL3hoaXRlZGV2L2NyZW1pL2NwL3NjcnVteS9hcHAvanMvY29tcG9uZW50cy9wcm9qZWN0LmNqc3giLCIvaG9tZS94aGl0ZWRldi9jcmVtaS9jcC9zY3J1bXkvYXBwL2pzL2NvbXBvbmVudHMvc3ByaW50LWxpc3QuY2pzeCIsIi9ob21lL3hoaXRlZGV2L2NyZW1pL2NwL3NjcnVteS9hcHAvanMvbWFpbi5janN4IiwiL2hvbWUveGhpdGVkZXYvY3JlbWkvY3Avc2NydW15L2FwcC9qcy9zdG9yZXMvcHJvamVjdC1saXN0LmNqc3giLCIvaG9tZS94aGl0ZWRldi9jcmVtaS9jcC9zY3J1bXkvYXBwL2pzL3N0b3Jlcy9wcm9qZWN0LmNqc3giLCIvaG9tZS94aGl0ZWRldi9jcmVtaS9jcC9zY3J1bXkvYXBwL2pzL3N0b3Jlcy9zcHJpbnQtbGlzdC5janN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQTs7QUFBQSxZQUFBLEdBQWUsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsQ0FDaEMsUUFEZ0MsRUFFaEMsbUJB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SUFDTCxPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7SUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRO1dBQ1IsSUFBQyxDQUFBLEtBQUQsQ0FBQTtFQUhLLENBUFQ7RUFXQSxLQUFBLEVBQU8sU0FBQTtXQUNILElBQUMsQ0FBQSxPQUFELENBQVMsSUFBQyxDQUFBLElBQVY7RUFERyxDQVhQO0NBRGM7O0FBZWxCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIk1vZGFsQWN0aW9ucyA9IFJlZmx1eC5jcmVhdGVBY3Rpb25zIFtcbiAgICAnc3VibWl0JyxcbiAgICAnc2V0Q3VycmVudFByb2plY3QnLFxuICAgICdzZXRUeXBlJyxcbiAgICAnaGFuZGxlTmFtZScsXG4gICAgJ2hhbmRsZURlc2NyaXB0aW9uJyxcbiAgICAnaGFuZGxlUmVwbycsXG4gICAgJ2hhbmRsZU1lbWJlcicsXG4gICAgJ2FkZE1lbWJlcicsXG4gICAgJ2RlbGV0ZU1lbWJlcidcbl1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbEFjdGlvbnNcbiIsIlByb2plY3RMaXN0QWN0aW9ucyA9IFJlZmx1eC5jcmVhdGVBY3Rpb25zIFtcbiAgICAnZmV0Y2hMaXN0JyxcbiAgICAnZGVsZXRlJyxcbiAgICAnY2hhbmdlQ3VycmVudCdcbl1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0TGlzdEFjdGlvbnNcbiIsIlByb2plY3RBY3Rpb25zID0gUmVmbHV4LmNyZWF0ZUFjdGlvbnMgW1xuICAgICdzZWxlY3RCYWNrbG9nJyxcbiAgICAnc2V0Q3VycmVudFByb2plY3QnLFxuICAgICdzZWxlY3RTcHJpbnRzJ1xuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RBY3Rpb25zXG4iLCJTcHJpbnRMaXN0QWN0aW9ucyA9IFJlZmx1eC5jcmVhdGVBY3Rpb25zIFtcbiAgICAnaGFuZGxlTmFtZScsXG4gICAgJ2hhbmRsZURlc2NyaXB0aW9uJyxcbiAgICAnYWRkJyxcbiAgICAnc2V0TGlzdCdcbl1cblxubW9kdWxlLmV4cG9ydHMgPSBTcHJpbnRMaXN0QWN0aW9uc1xuIiwiQWN0aW9ucyA9IHJlcXVpcmUgJy4uL2FjdGlvbnMvcHJvamVjdC1saXN0J1xuU3RvcmUgPSByZXF1aXJlICcuLi9zdG9yZXMvcHJvamVjdC1saXN0J1xuTW9kYWxBY3Rpb25zID0gcmVxdWlyZSAnLi4vYWN0aW9ucy9tb2RhbCdcblxuQWRkUHJvamVjdCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gICAgICAgIHJlbmRlciA6IC0+XG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgeyBcXFxuICAgICAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKE1vZGFsQWN0aW9ucy5zZXRUeXBlLmJpbmQgbnVsbCwgZXZlbnQsICdwb3N0JyksICBcXFxuICAgICAgICAgICAgICAgICBcImRhdGEtdG9nZ2xlXCI6IFwibW9kYWxcIiwgIFxcXG4gICAgICAgICAgICAgICAgIFwiZGF0YS10YXJnZXRcIjogXCIjYWRkTW9kYWxcIiwgIFxcXG4gICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibWF0ZXJpYWwtaWNvbnNcIn0sIFwiXCJcIlxuICAgICAgICAgICAgICAgICAgYWRkXG5cIlwiXCIpXG5cbkRlbGV0ZUNvbmZpcm0gPSBSZWFjdC5jcmVhdGVDbGFzc1xuICAgICAgICByZW5kZXIgOiAtPlxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1wiY2xhc3NOYW1lXCI6IFwibW9kYWwgZmFkZVwiLCBcImlkXCI6IFwiY29uZmlybU1vZGFsXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XCJjbGFzc05hbWVcIjogXCJtb2RhbC1kaWFsb2dcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1wiY2xhc3NOYW1lXCI6IFwibW9kYWwtY29udGVudFwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcImNsYXNzTmFtZVwiOiBcIm1vZGFsLWhlYWRlclwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1widHlwZVwiOiBcImJ1dHRvblwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImNsb3NlXCIsICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1kaXNtaXNzXCI6IFwibW9kYWxcIiwgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiQ2xvc2VcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1wiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJ9LCBcIlwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgw5dcblwiXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDRcIiwge1wiY2xhc3NOYW1lXCI6IFwibW9kYWwtdGl0bGVcIn0sIFwiXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV0ZXMtdm91cyBzdXIgZGUgdm91bG9pciBzdXBwcmltZXIgbGUgcHJvamV0P1xuXCJcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XCJjbGFzc05hbWVcIjogXCJtb2RhbC1ib2R5XCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCIsICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiYnRuIGJ0bi1kZWZhdWx0XCIsICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1kaXNtaXNzXCI6IFwibW9kYWxcIn0sIFwiXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vblxuXCJcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN1Ym1pdFwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImJ0biBidG4tcHJpbWFyeVwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKEBwcm9wcy5oYW5kbGUpfSwgXCJcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3VpXG5cIlwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuXG5EZWxldGVQcm9qZWN0ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgICAgICAgcmVuZGVyIDogLT5cbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJ0eXBlXCI6IFwiYnV0dG9uXCIsIFwiY2xhc3NOYW1lXCI6IFwiYnRuIGJ0bi1kZWZhdWx0XCJ9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7IFxcXG4gICAgICAgICAgICAgICAgICAgICBcImRhdGEtdG9nZ2xlXCI6IFwibW9kYWxcIiwgIFxcXG4gICAgICAgICAgICAgICAgICAgICBcImRhdGEtdGFyZ2V0XCI6IFwiI2NvbmZpcm1Nb2RhbFwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibWF0ZXJpYWwtaWNvbnNcIn0sIFwiXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlXG5cIlwiXCIpXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEZWxldGVDb25maXJtLCB7XCJoYW5kbGVcIjogKEFjdGlvbnMuZGVsZXRlKX0pXG4gICAgICAgICAgICAgICAgKVxuXG5FZGl0UHJvamVjdCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gICAgICAgIHJlbmRlciA6IC0+XG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgeyBcXFxuICAgICAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKE1vZGFsQWN0aW9ucy5zZXRUeXBlLmJpbmQgbnVsbCwgZXZlbnQsJ3B1dCcpLCAgXFxcbiAgICAgICAgICAgICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcIm1vZGFsXCIsICBcXFxuICAgICAgICAgICAgICAgICBcImRhdGEtdGFyZ2V0XCI6IFwiI2FkZE1vZGFsXCIsICBcXFxuICAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcIm1hdGVyaWFsLWljb25zXCJ9LCBcIlwiXCJcbiAgICAgICAgICAgICAgICAgICAgZWRpdFxuXCJcIlwiKVxuXG5Qcm9qZWN0ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHsgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib25DbGlja1wiOiAoQHByb3BzLm9uQ2xpY2suYmluZCBudWxsLEBwcm9wcy5pZCksICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJcIiwgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBcImRyb3Bkb3duTWVudVwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIG51bGwsIChAcHJvcHMubmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblxuUHJvamVjdExpc3QgPSBSZWFjdC5jcmVhdGVDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgbWl4aW5zOiBbUmVmbHV4LmNvbm5lY3QoU3RvcmUsICdkYXRhJyldXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXI6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBAc3RhdGUuZGF0YS5jdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RzID0gQHN0YXRlLmRhdGEucHJvamVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBrLHByb2plY3Qgb2YgcHJvamVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2ggUmVhY3QuY3JlYXRlRWxlbWVudChQcm9qZWN0LCB7IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IChrKSwgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiAoayksICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IChwcm9qZWN0Lm5hbWUpLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib25DbGlja1wiOiAoQWN0aW9ucy5jaGFuZ2VDdXJyZW50KX0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XCJjbGFzc05hbWVcIjogXCJidG4tZ3JvdXBcIiwgXCJyb2xlXCI6IFwiZ3JvdXBcIiwgXCJhcmlhLWxhYmVsXCI6IFwiLi4uXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcImNsYXNzTmFtZVwiOiBcImRyb3Bkb3duXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJidXR0b25cIiwgIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcImRyb3Bkb3duTWVudVwiLCAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcImRyb3Bkb3duXCIsICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJ0cnVlXCIsICBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogXCJ0cnVlXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2plY3RzW2N1cnJlbnRdLm5hbWUgaWYgcHJvamVjdHMubGVuZ3RoIGlzbnQgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XCJjbGFzc05hbWVcIjogXCJjYXJldFwifSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XCJ0eXBlXCI6IFwiYnV0dG9uXCIsIFwiY2xhc3NOYW1lXCI6IFwiYnRuIGJ0bi1kZWZhdWx0XCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRQcm9qZWN0LCB7XCJwcm9qZWN0XCI6IChwcm9qZWN0c1tjdXJyZW50XSl9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEZWxldGVQcm9qZWN0LCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcInR5cGVcIjogXCJidXR0b25cIiwgXCJjbGFzc05hbWVcIjogXCJidG4gYnRuLWRlZmF1bHRcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWRkUHJvamVjdCwgbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XCJjbGFzc05hbWVcIjogXCJkcm9wZG93bi1tZW51XCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RMaXN0XG4iLCJBY3Rpb25zID0gcmVxdWlyZSAnLi4vYWN0aW9ucy9wcm9qZWN0J1xuU3RvcmUgPSByZXF1aXJlICcuLi9zdG9yZXMvcHJvamVjdCdcblxuU3ByaW50TGlzdCA9IHJlcXVpcmUgJy4vc3ByaW50LWxpc3QnXG5cblRhYk5hdiA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gICAgcmVuZGVyOiAtPlxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibmF2XCIsIHtcInJvbGVcIjogXCJuYXZpZ2F0aW9uXCJ9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcImNsYXNzTmFtZVwiOiBcIm5hdiBuYXYtdGFic1wifSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyBcXFxuICAgICAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKEFjdGlvbnMuc2VsZWN0QmFja2xvZyksICBcXFxuICAgICAgICAgICAgICAgICBcInJvbGVcIjogXCJwcmVzZW50YXRpb25cIiwgIFxcXG4gICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6ICgnYWN0aXZlJyBpZiBAcHJvcHMuYmFja2xvZyl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgbnVsbCwgXCJCYWNrbG9nXCIpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyBcXFxuICAgICAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKEFjdGlvbnMuc2VsZWN0U3ByaW50cyksICBcXFxuICAgICAgICAgICAgICAgICBcInJvbGVcIjogXCJwcmVzZW50YXRpb25cIiwgIFxcXG4gICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6ICgnYWN0aXZlJyBpZiBub3QgQHByb3BzLmJhY2tsb2cpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIG51bGwsIFwiU3ByaW50c1wiKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuXG5UYWJDb250ZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgICByZW5kZXI6IC0+XG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCxcbiAgICAgICAgICAgIChSZWFjdC5jcmVhdGVFbGVtZW50KFNwcmludExpc3QsIG51bGwpIGlmIG5vdCBAcHJvcHMuYmFja2xvZylcbiAgICAgICAgKVxuXG5Qcm9qZWN0ID0gUmVhY3QuY3JlYXRlQ2xhc3NcbiAgICBtaXhpbjogW1JlZmx1eC5jb25uZWN0KFN0b3JlLCAnZGF0YScpXVxuICAgIHJlbmRlcjogLT5cbiAgICAgICAgYmFja2xvZyA9IEBzdGF0ZS5kYXRhLmJhY2tsb2dcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUYWJOYXYsIHtcImJhY2tsb2dcIjogKGJhY2tsb2cpfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYkNvbnRlbnQsIHtcImJhY2tsb2dcIjogKGJhY2tsb2cpfSlcbiAgICAgICAgKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RcbiIsIlN0b3JlID0gcmVxdWlyZSAnLi4vc3RvcmVzL3NwcmludC1saXN0J1xuQWN0aW9ucyA9IHJlcXVpcmUgJy4uL2FjdGlvbnMvc3ByaW50LWxpc3QnXG5cblNwcmludCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gICAgcmVuZGVyOiAtPlxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XCJjbGFzc05hbWVcIjogXCJwYW5lbCBwYW5lbC1wcmltYXJ5XCJ9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1wiY2xhc3NOYW1lXCI6IFwicGFuZWwtaGVhZGluZ1wifSxcbiAgICAgICAgICAgICAgKEBwcm9wcy5pZClcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1wiY2xhc3NOYW1lXCI6IFwicGFuZWwtYm9keVwifSxcbiAgICAgICAgICAgICAgKEBwcm9wcy5zdGFydClcbiAgICAgICAgICApXG4gICAgICApXG5cblNwcmludExpc3QgPSBSZWFjdC5jcmVhdGVDbGFzc1xuICAgIG1peGluczogW1JlZmx1eC5jb25uZWN0KFN0b3JlLCAnbGlzdCcpXVxuICAgIHJlbmRlcjogLT5cbiAgICAgICAgY29uc29sZS5sb2cgQHN0YXRlLmxpc3RcbiAgICAgICAgaXRlbXMgPSBAc3RhdGUubGlzdC5tYXAgKGkpIC0+IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ByaW50LCB7XCJrZXlcIjogKGkuaWQpLCBcImlkXCI6IChpLmlkKSwgXCJzdGFydFwiOiAoaS5zdGFydCl9KVxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcImNsYXNzTmFtZVwiOiBcImxpc3QtZ3JvdXBcIn0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1widHlwZVwiOiBcImJ1dHRvblwiLCBcImNsYXNzTmFtZVwiOiBcImJ0biBidG4tZGVmYXVsdFwifSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHsgXFxcbiAgICAgICAgICAgICBcIm9uQ2xpY2tcIjogKEFjdGlvbnMuYWRkKSwgIFxcXG4gICAgICAgICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcIm1vZGFsXCIsICBcXFxuICAgICAgICAgICAgIFwiZGF0YS10YXJnZXRcIjogXCIjc3ByaW50TW9kYWxcIiwgIFxcXG4gICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJtYXRlcmlhbC1pY29uc1wifSwgXCJcIlwiXG4gICAgICAgICAgICAgICAgYWRkXG5cIlwiXCIpXG4gICAgICAgICksXG5cbiAgICAgICAgICAgIChpdGVtcylcbiAgICAgICAgKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcmludExpc3RcbiIsIlByb2plY3RMaXN0ID0gcmVxdWlyZSAnLi9jb21wb25lbnRzL3Byb2plY3QtbGlzdCdcblByb2plY3QgPSByZXF1aXJlICcuL2NvbXBvbmVudHMvcHJvamVjdCdcblxuTWFpbiA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gICAgICAgIHJlbmRlciA6IC0+XG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQcm9qZWN0TGlzdCwgbnVsbCksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQcm9qZWN0LCBudWxsKVxuICAgICAgICAgICAgKVxuXG5SZWFjdC5yZW5kZXIgUmVhY3QuY3JlYXRlRWxlbWVudChNYWluLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKVxuIiwiQWN0aW9ucyA9IHJlcXVpcmUgJy4uL2FjdGlvbnMvcHJvamVjdC1saXN0J1xuUHJvamVjdEFjdGlvbnMgPSByZXF1aXJlICcuLi9hY3Rpb25zL3Byb2plY3QnXG5cblByb2plY3RMaXN0U3RvcmUgPSBSZWZsdXguY3JlYXRlU3RvcmVcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgICAgICAgICAgICAgIEBkYXRhXG4gICAgICAgIGNoYW5nZUN1cnJlbnQ6IChpZCkgLT5cbiAgICAgICAgICAgICAgICBAZGF0YS5jdXJyZW50ID0gaWRcbiAgICAgICAgICAgICAgICBAdHJpZ2dlciBAZGF0YVxuICAgICAgICAgICAgICAgIFByb2plY3RBY3Rpb25zLnNldEN1cnJlbnRQcm9qZWN0IEBkYXRhLnByb2plY3RzW0BkYXRhLmN1cnJlbnRdXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0czogW10sXG4gICAgICAgICAgICAgICAgY3VycmVudDogMFxuICAgICAgICB9LFxuICAgICAgICBsaXN0ZW5hYmxlczogW0FjdGlvbnNdLFxuICAgICAgICBzcmNVcmw6ICcvYXBpL3YxL3Byb2plY3RzJyxcbiAgICAgICAgaW5pdDogLT5cbiAgICAgICAgICAgICAgICBAZmV0Y2hMaXN0KClcbiAgICAgICAgZGVsZXRlOiAtPlxuICAgICAgICAgICAgaWQgPSBAZGF0YS5wcm9qZWN0c1tAZGF0YS5jdXJyZW50XS5faWRcbiAgICAgICAgICAgIHJlcXVlc3QgPSBzdXBlcmFnZW50XG4gICAgICAgICAgICByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgIC5kZWxldGUgQHNyY1VybCArICcvJyArIGlkXG4gICAgICAgICAgICAgICAgICAgIC5lbmQgKChlcnIscmVzKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlcy5va1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgQGRhdGEucHJvamVjdHNbQGRhdGEuY3VycmVudF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZUN1cnJlbnQgMFxuICAgICAgICAgICAgICAgICAgICApLmJpbmQgQFxuXG4gICAgICAgIGZldGNoTGlzdDogLT5cbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gc3VwZXJhZ2VudFxuICAgICAgICAgICAgICAgIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXQgQHNyY1VybFxuICAgICAgICAgICAgICAgICAgICAgICAgLmFjY2VwdCAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQgKChlcnIscmVzKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiByZXMub2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZGF0YS5wcm9qZWN0cyA9IHJlcy5ib2R5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZUN1cnJlbnQgMFxuICAgICAgICAgICAgICAgICAgICAgICAgKS5iaW5kIEBcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0TGlzdFN0b3JlXG4iLCJBY3Rpb25zID0gcmVxdWlyZSAnLi4vYWN0aW9ucy9wcm9qZWN0J1xuXG5Nb2RhbEFjdGlvbnMgPSByZXF1aXJlICcuLi9hY3Rpb25zL21vZGFsJ1xuU3ByaW50TGlzdEFjdGlvbnMgPSByZXF1aXJlICcuLi9hY3Rpb25zL3NwcmludC1saXN0J1xuXG5Qcm9qZWN0U3RvcmUgPSBSZWZsdXguY3JlYXRlU3RvcmVcbiAgICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdoJ1xuICAgICAgICBAZGF0YVxuICAgIGxpc3RlbmFibGVzOiBbQWN0aW9uc11cbiAgICBkYXRhOiB7IHByb2plY3Q6IHt9LCBiYWNrbG9nOiB0cnVlIH1cbiAgICBpbml0OiAtPlxuICAgICAgICBjb25zb2xlLmxvZyBAZGF0YVxuICAgICAgICBAdHJpZ2dlciBAZGF0YVxuICAgIHNlbGVjdEJhY2tsb2c6IC0+XG4gICAgICAgIEBkYXRhLmJhY2tsb2cgPSB0cnVlXG4gICAgICAgIEB0cmlnZ2VyIEBkYXRhXG4gICAgc2VsZWN0U3ByaW50czogLT5cbiAgICAgICAgQGRhdGEuYmFja2xvZyA9IGZhbHNlXG4gICAgICAgIEB0cmlnZ2VyIEBkYXRhXG4gICAgc2V0Q3VycmVudFByb2plY3Q6IChwKSAtPlxuICAgICAgICBAZGF0YS5wcm9qZWN0ID0gcFxuICAgICAgICBAdHJpZ2dlciBAZGF0YVxuICAgICAgICBTcHJpbnRMaXN0QWN0aW9ucy5zZXRMaXN0IEBkYXRhLnByb2plY3Quc3ByaW50c1xuICAgICAgICBNb2RhbEFjdGlvbnMuc2V0Q3VycmVudFByb2plY3QgQGRhdGEucHJvamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RTdG9yZVxuIiwiQWN0aW9ucyA9IHJlcXVpcmUgJy4uL2FjdGlvbnMvc3ByaW50LWxpc3QnXG5cblNwcmludExpc3RTdG9yZSA9IFJlZmx1eC5jcmVhdGVTdG9yZVxuICAgIGxpc3RlbmFibGVzOiBbQWN0aW9uc11cbiAgICBsaXN0OiBbXVxuICAgIGluaXQ6IC0+XG4gICAgICAgIEBmZXRjaCgpXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgICAgICBjb25zb2xlLmxvZ1xuICAgICAgICBAbGlzdFxuICAgIHNldExpc3Q6IChsKSAtPlxuICAgICAgICBjb25zb2xlLmxvZyBsXG4gICAgICAgIEBsaXN0ID0gbFxuICAgICAgICBAZmV0Y2goKVxuICAgIGZldGNoOiAtPlxuICAgICAgICBAdHJpZ2dlciBAbGlzdFxuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcmludExpc3RTdG9yZVxuIl19
