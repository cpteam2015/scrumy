// Generated by CoffeeScript 1.10.0
var DeleteConfirm, Member, MembersInput, Modal, TextInput;

TextInput = React.createClass({displayName: "TextInput",
  render: function() {
    return React.createElement("div", {
      "className": "form-group"
    }, React.createElement("label", {
      "htmlFor": this.props.id
    }, this.props.placeholder), React.createElement("input", {
      "onChange": this.props.handle,
      "value": this.props.text,
      "type": "text",
      "className": "form-control",
      "id": this.props.id,
      "placeholder": this.props.placeholder,
      "required": this.props.required
    }));
  }
});

Member = React.createClass({displayName: "Member",
  render: function() {
    return React.createElement("div", {
      "className": "row"
    }, React.createElement("div", {
      "className": "col-md-11"
    }, React.createElement("input", {
      "onChange": this.props.handle,
      "type": "text",
      "className": "form-control",
      "placeholder": "Nom"
    })), React.createElement("div", {
      "className": "col-md-1"
    }, React.createElement("i", {
      "className": "material-icons",
      "onClick": this.props.del
    }, "delete")));
  }
});

MembersInput = React.createClass({displayName: "MembersInput",
  render: function() {
    var k, memberViews, ref, v;
    memberViews = [];
    ref = this.props.members;
    for (k in ref) {
      v = ref[k];
      memberViews.push(React.createElement(Member, {
        "handle": (function(e) {
          return this.props.handle(e, k);
        }).bind(this),
        "del": this.props.del.bind(null, k),
        "key": k
      }));
    }
    return React.createElement("div", {
      "className": "form-group"
    }, React.createElement("label", null, "Collaborateurs"), memberViews, React.createElement("i", {
      "className": "material-icons",
      "onClick": this.props.add
    }, "add"));
  }
});

Modal = React.createClass({displayName: "Modal",
  send: function(e) {
    var request;
    e.preventDefault();
    request = superagent;
    request.post('/api/v1/projects').type('json').send(this.state.project).end((function(err, res) {
      if (res.ok) {
        return console.log('data sent');
      }
    }).bind(this));
    return $("#addModal").modal('hide');
  },
  handleName: function(event) {
    this.state.project.name = event.target.value;
    return this.setState({
      project: this.state.project
    });
  },
  handleDescription: function(event) {
    this.state.project.description = event.target.value;
    return this.setState({
      project: this.state.project
    });
  },
  handleRepo: function(event) {
    this.state.project.git_repo = event.target.value;
    return this.setState({
      project: this.state.project
    });
  },
  handleMember: function(event, index) {
    this.state.project.members[index] = event.target.value;
    return this.setState({
      project: this.state.project
    });
  },
  addMember: function() {
    this.state.project.members.push('');
    return this.setState({
      project: this.state.project
    });
  },
  deleteMember: function(index) {
    delete this.state.project.members[index];
    return this.setState({
      project: this.state.project
    });
  },
  getInitialState: function() {
    return {
      project: {
        name: '',
        description: '',
        git_repo: '',
        members: [],
        backlog: [],
        sprints: []
      }
    };
  },
  render: function() {
    var project;
    project = this.state.project;
    return React.createElement("form", {
      "onSubmit": this.send
    }, React.createElement(TextInput, {
      "handle": this.handleName,
      "text": project.name,
      "id": "inputName",
      "placeholder": "Nom",
      "required": "required"
    }), React.createElement(TextInput, {
      "handle": this.handleDescription,
      "text": project.description,
      "id": "inputDescription",
      "placeholder": "Description"
    }), React.createElement(TextInput, {
      "handle": this.handleRepo,
      "text": project.git_repo,
      "id": "inputRepo",
      "placeholder": "Dépot git"
    }), React.createElement(MembersInput, {
      "del": this.deleteMember,
      "add": this.addMember,
      "members": project.members,
      "handle": this.handleMember
    }), React.createElement("button", {
      "type": "button",
      "className": "btn btn-default",
      "data-dismiss": "modal"
    }, "Fermer"), React.createElement("button", {
      "type": "submit",
      "className": "btn btn-primary"
    }, "Appliquer"));
  }
});

React.render(React.createElement(Modal, null), document.getElementById('modal'));

DeleteConfirm = React.createClass({displayName: "DeleteConfirm",
  render: function() {
    return React.createElement("div", {
      "className": "modal fade",
      "id": "confirmModal"
    }, React.createElement("div", {
      "className": "modal-dialog"
    }, React.createElement("div", {
      "className": "modal-content"
    }, React.createElement("div", {
      "className": "modal-header"
    }, React.createElement("button", {
      "type": "button",
      "className": "close",
      "data-dismiss": "modal",
      "aria-label": "Close"
    }, React.createElement("span", {
      "aria-hidden": "true"
    }, "×")), React.createElement("h4", {
      "className": "modal-title"
    }, "Etes-vous sur de vouloir supprimer le projet?")), React.createElement("div", {
      "className": "modal-body"
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default",
      "data-dismiss": "modal"
    }, "Non"), React.createElement("button", {
      "type": "submit",
      "className": "btn btn-primary",
      "onClick": this.props.handle
    }, "Oui")))));
  }
});
